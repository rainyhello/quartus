--abs_divider DEN_REPRESENTATION="SIGNED" LPM_PIPELINE=1 MAXIMIZE_SPEED=5 NUM_REPRESENTATION="SIGNED" SKIP_BITS=0 WIDTH_D=48 WIDTH_N=48 aclr clk_en clock denominator numerator quotient remainder
--VERSION_BEGIN 13.1 cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_lpm_abs 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_lpm_divide 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ cbx_util_mgl 2013:10:23:18:05:48:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION alt_u_div_ktg (aclr, clk_en, clock, denominator[47..0], numerator[47..0])
RETURNS ( quotient[47..0], remainder[47..0]);
FUNCTION lpm_abs_gv9 (data[47..0])
RETURNS ( overflow, result[47..0]);

--synthesis_resources = lut 196 reg 194 
OPTIONS ALTERA_INTERNAL_OPTION = "{-to DFF_diff_signs} POWER_UP_LEVEL=HIGH";

SUBDESIGN abs_divider_d1i
( 
	aclr	:	input;
	clk_en	:	input;
	clock	:	input;
	denominator[47..0]	:	input;
	numerator[47..0]	:	input;
	quotient[47..0]	:	output;
	remainder[47..0]	:	output;
) 
VARIABLE 
	divider : alt_u_div_ktg;
	DFF_diff_signs[0..0] : dffe
		WITH (
			power_up = "high"
		);
	DFF_num_sign[0..0] : dffe;
	my_abs_den : lpm_abs_gv9;
	my_abs_num : lpm_abs_gv9;
	compl_add_quot_result_int[48..0]	:	WIRE;
	compl_add_quot_cin	:	WIRE;
	compl_add_quot_dataa[47..0]	:	WIRE;
	compl_add_quot_datab[47..0]	:	WIRE;
	compl_add_quot_result[47..0]	:	WIRE;
	compl_add_rem_result_int[48..0]	:	WIRE;
	compl_add_rem_cin	:	WIRE;
	compl_add_rem_dataa[47..0]	:	WIRE;
	compl_add_rem_datab[47..0]	:	WIRE;
	compl_add_rem_result[47..0]	:	WIRE;
	dff_num_sign_q_out	: WIRE;
	diff_signs	: WIRE;
	gnd_wire	: WIRE;
	neg_quot[47..0]	: WIRE;
	neg_rem[47..0]	: WIRE;
	norm_den[47..0]	: WIRE;
	norm_num[47..0]	: WIRE;
	num_sign	: WIRE;
	protect_quotient[47..0]	: WIRE;
	protect_remainder[47..0]	: WIRE;
	vcc_wire	: WIRE;

BEGIN 
	divider.aclr = aclr;
	divider.clk_en = clk_en;
	divider.clock = clock;
	divider.denominator[] = norm_den[];
	divider.numerator[] = norm_num[];
	DFF_diff_signs[].clk = clock;
	DFF_diff_signs[].d = ( diff_signs);
	DFF_diff_signs[].ena = clk_en;
	DFF_diff_signs[].prn = (! aclr);
	DFF_num_sign[].clk = clock;
	DFF_num_sign[].clrn = (! aclr);
	DFF_num_sign[].d = ( num_sign);
	DFF_num_sign[].ena = clk_en;
	my_abs_den.data[] = denominator[];
	my_abs_num.data[] = numerator[];
	compl_add_quot_result_int[] = (compl_add_quot_dataa[], compl_add_quot_cin) + (compl_add_quot_datab[], compl_add_quot_cin);
	compl_add_quot_result[] = compl_add_quot_result_int[48..1];
	compl_add_quot_cin = vcc_wire;
	compl_add_quot_dataa[] = (! protect_quotient[]);
	compl_add_quot_datab[] = ( gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire);
	compl_add_rem_result_int[] = (compl_add_rem_dataa[], compl_add_rem_cin) + (compl_add_rem_datab[], compl_add_rem_cin);
	compl_add_rem_result[] = compl_add_rem_result_int[48..1];
	compl_add_rem_cin = vcc_wire;
	compl_add_rem_dataa[] = (! protect_remainder[]);
	compl_add_rem_datab[] = ( gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire);
	dff_num_sign_q_out = DFF_num_sign[0..0].q;
	diff_signs = (numerator[47..47] $ denominator[47..47]);
	gnd_wire = B"0";
	neg_quot[] = compl_add_quot_result[];
	neg_rem[] = compl_add_rem_result[];
	norm_den[] = my_abs_den.result[];
	norm_num[] = my_abs_num.result[];
	num_sign = numerator[47..47];
	protect_quotient[] = divider.quotient[];
	protect_remainder[] = divider.remainder[];
	quotient[] = ((protect_quotient[] & (! DFF_diff_signs[0..0].q)) # (neg_quot[] & DFF_diff_signs[0..0].q));
	remainder[] = ((protect_remainder[] & (! dff_num_sign_q_out)) # (neg_rem[] & dff_num_sign_q_out));
	vcc_wire = B"1";
END;
--VALID FILE
