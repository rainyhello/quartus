--alt_zaccum CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone III" EXTRA_LATENCY=0 LPM_REPRESENTATION="SIGNED" WIDTH_IN=28 WIDTH_OUT=32 aclr clken clock data overflow result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 13.1 cbx_alt_zaccum 2013:10:23:18:05:48:SJ cbx_altaccumulate 2013:10:23:18:05:48:SJ cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION accum_bcl (aclr, clken, clock, data[27..0])
RETURNS ( overflow, result[31..0]);

--synthesis_resources = lut 32 reg 34 
SUBDESIGN zaccum_92l
( 
	aclr	:	input;
	clken	:	input;
	clock	:	input;
	data[27..0]	:	input;
	overflow	:	output;
	result[31..0]	:	output;
) 
VARIABLE 
	accum : accum_bcl;

BEGIN 
	accum.aclr = aclr;
	accum.clken = clken;
	accum.clock = clock;
	accum.data[] = data[];
	overflow = accum.overflow;
	result[] = accum.result[];
END;
--VALID FILE
