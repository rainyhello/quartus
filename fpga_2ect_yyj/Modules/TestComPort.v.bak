//**************************************************************//
//**************************************************************//
//Project Name: Novel ECT Hardware Design
//
//Author: Yunjie Yang
//Create  Date: 16:16 2014-11-15
//Design  Name: ECTNew
//Module  Name: TestComPort
//Target Devices: EP3C25F324C8
//Tool versions: 13.1
//Descriptions: This module is a sub sm to test the communication port.
//Revision:
//**************************************************************//
//**************************************************************//

module TestComPort
(
    Clk, Rst,
	 SysState, //System state
	 Enable, Done, //Hand shaking signal
	 TestLED
);
    //Parameters 
	 parameter Idle = 2'b00;    //State waiting for command
	 parameter Check = 2'b01;   //State waiting for command
	 parameter Work = 2'b10;    //State received command
	 
	 //Define

	 
	 //Interface
	 input Clk, Rst;
	 
	 input Done;                //Return to idle
	 
	 input UARTDatReady;
	 input [7:0] UARTReceive;
	 
	 input UARTAvl;
	 output reg [7:0] UARTSend;
	 output reg UARTDatLock;
	 
	 output [7:0] SysState; //For sub state machine modules and led
	 
	 output reg Enable;	 
	 	 
	 //Internal Regs	 
	 reg [2:0] Stat;
	 reg preDatReady;
	 reg [7:0] tempUARTDat;
	 
	 assign SysState = tempUARTDat;
	 
	 always @ (posedge Clk or negedge Rst)
		if (!Rst) begin			
			UARTSend <= 0;
			UARTDatLock <= 0;
			preDatReady <= 0;
			tempUARTDat <= 7'd0;

			Enable <= 0;
			
			Stat <= 2'b00;
		end
		else begin
			preDatReady <= UARTDatReady;
			//Master sm
			case (Stat)
			Idle: //Idle state, waiting a data/command from UART
				begin
				if (preDatReady == 0 && UARTDatReady == 1) 
					begin                                      //Received a data
							tempUARTDat <= UARTReceive;
							UARTDatLock <= 0;
							UARTSend <= UARTReceive;
							Enable <= 1;
							
							Stat <= Check;
					end
				else 
					begin
					      Enable <= 0;
							
							Stat <= Idle;
					end
				end
			Check: //Send the received data back to UI for checking
				begin
				if (UARTAvl == 1) 
					begin
							UARTDatLock <= 1;
							Stat <= Work;
					end
				else 
					begin
							Stat <= Check;
					end				
				end
			Work: //Go to sub state machine
				begin
				if (Done == 1)         //substatemachine done, return to idle
					begin
							Enable <= 0;
							Stat <= Idle;
					end
				else
					begin
							Stat <= Work;
					end
				end
			
			default: Stat <= Idle;
			endcase
		
		end
		
endmodule
		
				
				
				
				
				
				
				
				